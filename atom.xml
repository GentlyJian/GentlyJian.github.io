<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孜孜Blog</title>
  
  <subtitle>小建的成长博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gentlyjian.github.io/"/>
  <updated>2020-04-28T11:25:50.831Z</updated>
  <id>https://gentlyjian.github.io/</id>
  
  <author>
    <name>小建</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于for的一系列</title>
    <link href="https://gentlyjian.github.io/posts/988e810e/"/>
    <id>https://gentlyjian.github.io/posts/988e810e/</id>
    <published>2020-04-24T00:57:20.000Z</published>
    <updated>2020-04-28T11:25:50.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>遍历数组常用for循环 ES5遍历数组的方法有forEach,map,filter,some，every,reduce等<br> 使用forEach不能使用break和return跳出循环</p><p>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</span><br><span class="line">myArray.name = <span class="string">"数组"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>,len = myArray.length; j &lt; len; j++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a>for...in</h5><p>使用for in 遍历数组的毛病</p><p>1.index是字符串<br>2.遍历顺序可能不是数组的内部顺序<br>3.会遍历数组的可枚举对象包括原型，例如上面的method和name<br>所以for in 不适合遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index,myArray[index])</span><br><span class="line"><span class="comment">//   0 a</span></span><br><span class="line"><span class="comment">//   1 b</span></span><br><span class="line"><span class="comment">//   2 c</span></span><br><span class="line"><span class="comment">//   3 d</span></span><br><span class="line"><span class="comment">//   name 数组</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.length)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-of"><a href="#for-of" class="headerlink" title="for...of"></a>for...of</h5><p>使用for of 遍历的是数组的值而 for in 遍历的是数组的键名<br>for of遍历只会遍历数组自身的值，而不会去遍历原型和其他属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><h5 id="1-使用for-in遍历对象"><a href="#1-使用for-in遍历对象" class="headerlink" title="1.使用for in遍历对象"></a>1.使用for in遍历对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  a: <span class="string">"apple"</span>,</span><br><span class="line">  b: <span class="string">"banane"</span>,</span><br><span class="line">  c: <span class="string">"cherry"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i,myObj[i])</span><br><span class="line"><span class="comment">// 会遍历到原型上的方法和属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想遍历原型上的方法和属性可以使用hasOwnPropery<br>hasOwnPropery可以判断某属性是否是对象的实例属性，从而过滤掉原型上的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="keyword">if</span>(myObj.hasOwnProperty(i)) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i, myObj[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只获取自身属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-of-1"><a href="#for-of-1" class="headerlink" title="for...of"></a>for...of</h5><p>也可以使用for of 搭配Object.keys 来遍历对象 返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).<br>相关的Object属性还有<br>Object.getOwnPropertyNames(obj) 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).<br>使用Reflect.ownKeys(obj)遍历 返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(myObj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, myObj[key])</span><br><span class="line">  <span class="comment">// 不包含原型属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果实在想用 for of遍历对象，可以给该对象添加Symbol.iterator迭代器接口<br>接口自己实现<br>for of循环会先调用集合的Symbol.iterator方法，然后返回一个新的迭代器对象，<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法<br>每循环一次调用一次<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法var<br>使用Genertaor 自带next()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.a;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.b;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实现一个简单的迭代器</span></span><br><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(self);</span><br><span class="line">  <span class="keyword">const</span> len = keys.length;</span><br><span class="line">  <span class="keyword">let</span> pointer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"> next() &#123;</span><br><span class="line">   <span class="keyword">const</span> done = pointer &gt;= len;</span><br><span class="line">   <span class="keyword">const</span> value = !done ? self[keys[pointer++]]: <span class="literal">undefined</span>;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     done,</span><br><span class="line">     value</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用for of 遍历Map对象 顺便回顾一下Map对象的基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">"a"</span>, <span class="string">"apple"</span>],</span><br><span class="line">  [<span class="string">"b"</span>, <span class="string">"banane"</span>],</span><br><span class="line">  [<span class="string">"c"</span>, <span class="string">"cherry"</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 给Map对象添加属性</span></span><br><span class="line"><span class="built_in">console</span>.log(myMap.set(<span class="string">'d'</span>, <span class="string">'durian'</span>)) <span class="comment">// 返回是添加之后的Map</span></span><br><span class="line"><span class="comment">// 判断key是否存在 返回值 是否存在</span></span><br><span class="line">myMap.has(<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.has(\'a\'): '</span>, myMap.has(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.delete('a') // 删除属性 返回值 是否删除成功</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.delete(\'a\'): '</span>, myMap.delete(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.get('d') // 获取属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.get(\'d\') : '</span>, myMap.get(<span class="string">'d'</span>) );</span><br><span class="line">使用数组结构 <span class="built_in">Map</span>的item</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, val] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>for of 使用于遍历数组/数组对象[{},{}]/字符串/map/set等有迭代器对象的集合<br>但不能遍历对象，应为对象没有迭代器对象,它可以正确的相应break、continue、return语句<br>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/zjx304/p/10687017.html" target="_blank" rel="noopener">for in 和for of的区别</a><br><a href="https://blog.csdn.net/kuangshp128/article/details/85342343" target="_blank" rel="noopener">ES6可迭代对象与迭代器的理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;遍历数组&quot;&gt;&lt;a href=&quot;#遍历数组&quot; class=&quot;headerlink&quot; title=&quot;遍历数组&quot;&gt;&lt;/a&gt;遍历数组&lt;/h4&gt;&lt;h5 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h5&gt;&lt;p&gt;遍历数组常用for循环 ES5遍历数组的方法有forEach,map,filter,some，every,reduce等&lt;br&gt; 使用forEach不能使用break和return跳出循环&lt;/p&gt;
&lt;p&gt;es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.method = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myArray.name = &lt;span class=&quot;string&quot;&gt;&quot;数组&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len = myArray.length; j &amp;lt; len; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myArray[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://gentlyjian.github.io/categories/js/"/>
    
    
      <category term="js基础" scheme="https://gentlyjian.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="https://gentlyjian.github.io/posts/2ba55f9f/"/>
    <id>https://gentlyjian.github.io/posts/2ba55f9f/</id>
    <published>2020-04-22T02:38:48.000Z</published>
    <updated>2020-04-22T02:59:53.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="1-使用Object-assign将原对象的值分配给一个新对象"><a href="#1-使用Object-assign将原对象的值分配给一个新对象" class="headerlink" title="1.使用Object.assign将原对象的值分配给一个新对象"></a>1.使用Object.assign将原对象的值分配给一个新对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">name: <span class="string">'zzj'</span></span><br><span class="line">age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要在Object.assign 重新定义一个&#123;&#125; 然后将obj复制到&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">// 修改objCp 的属性 不会影响原来的对象</span></span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// &#123; name: 'zzj', age: '23' &#125; &#123; name: 'zzj', age: '22' &#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-使用ES6的扩展运算符"><a href="#2-使用ES6的扩展运算符" class="headerlink" title="2.使用ES6的扩展运算符"></a>2.使用ES6的扩展运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = &#123;...obj&#125;</span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// 效果同上</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法"><a href="#1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法" class="headerlink" title="1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法"></a>1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能拷贝方法 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure><h5 id="2-编写一个深拷贝函数"><a href="#2-编写一个深拷贝函数" class="headerlink" title="2.编写一个深拷贝函数"></a>2.编写一个深拷贝函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写一个函数</span></span><br><span class="line"><span class="comment">// 1. 判断传入的值是否是 对象 如果是进行拷贝，否则直接返回</span></span><br><span class="line"><span class="comment">// 2. 判断传入的值 是对象还是数组 给该值初始化&#123;&#125;或者[]</span></span><br><span class="line"><span class="comment">// 3.进行递归</span></span><br><span class="line"><span class="comment">// 深拷贝函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCp</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 判断是不是&#123;&#125;或者Array</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data === <span class="string">'object'</span> &amp;&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 判断该值是对象还是数组</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">typeof</span> data.length === <span class="string">'number'</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="comment">// 进行递归，对子项进行判断</span></span><br><span class="line">      val[item] = deepCp(data[item])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = deepCp(obj)</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h3&gt;&lt;h4 id=&quot;1-使用Object-assign将原对象的值分配给一个新对象&quot;&gt;&lt;a href=&quot;#1-使用Object-assign将原对象的值分配给一个新对象&quot; class=&quot;headerlink&quot; title=&quot;1.使用Object.assign将原对象的值分配给一个新对象&quot;&gt;&lt;/a&gt;1.使用Object.assign将原对象的值分配给一个新对象&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name: &lt;span class=&quot;string&quot;&gt;&#39;zzj&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	age: &lt;span class=&quot;string&quot;&gt;&#39;22&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 要在Object.assign 重新定义一个&amp;#123;&amp;#125; 然后将obj复制到&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; objCp = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 修改objCp 的属性 不会影响原来的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objCp.age = &lt;span class=&quot;string&quot;&gt;&#39;23&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(objCp, obj) &lt;span class=&quot;comment&quot;&gt;// &amp;#123; name: &#39;zzj&#39;, age: &#39;23&#39; &amp;#125; &amp;#123; name: &#39;zzj&#39;, age: &#39;22&#39; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://gentlyjian.github.io/categories/js/"/>
    
    
      <category term="js基础" scheme="https://gentlyjian.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
