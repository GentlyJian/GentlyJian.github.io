<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孜孜Blog</title>
  
  <subtitle>小建的成长博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gentlyjian.github.io/"/>
  <updated>2020-09-05T09:47:57.127Z</updated>
  <id>https://gentlyjian.github.io/</id>
  
  <author>
    <name>小建</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ts运行环境配置</title>
    <link href="https://gentlyjian.github.io/posts/25656de8/"/>
    <id>https://gentlyjian.github.io/posts/25656de8/</id>
    <published>2020-09-05T03:44:01.000Z</published>
    <updated>2020-09-05T09:47:57.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近简单学习了一下ts发现还真有点香，借双休总结回顾一下，先来回顾搭建一个可以运行ts文件的环境，这样后面编译ts就方便了</p><h3 id="1-安装typescript"><a href="#1-安装typescript" class="headerlink" title="1 安装typescript"></a>1 安装typescript</h3><h4 id="1-1-在拥有node的系统环境通过npm安装typescript"><a href="#1-1-在拥有node的系统环境通过npm安装typescript" class="headerlink" title="1.1 在拥有node的系统环境通过npm安装typescript"></a>1.1 在拥有node的系统环境通过npm安装typescript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><h4 id="1-2-查看版本检查是否安装成功"><a href="#1-2-查看版本检查是否安装成功" class="headerlink" title="1.2 查看版本检查是否安装成功"></a>1.2 查看版本检查是否安装成功</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h4 id="安装成功后就可以通过指令编译ts文件了-会在目录生成对应js文件"><a href="#安装成功后就可以通过指令编译ts文件了-会在目录生成对应js文件" class="headerlink" title="安装成功后就可以通过指令编译ts文件了,会在目录生成对应js文件"></a>安装成功后就可以通过指令编译ts文件了,会在目录生成对应js文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc main.ts</span><br></pre></td></tr></table></figure><p>感觉老是这样通过指令编译感觉很麻烦，那可以通过webpack配置对应的loader编译ts文件</p><h3 id="2-配置webpack-编译ts"><a href="#2-配置webpack-编译ts" class="headerlink" title="2 配置webpack 编译ts"></a>2 配置webpack 编译ts</h3><h4 id="2-1-创建项目目录"><a href="#2-1-创建项目目录" class="headerlink" title="2.1 创建项目目录"></a>2.1 创建项目目录</h4><blockquote><p>目录结构</p><blockquote><ul><li>src //存放源文件<blockquote><p>-- main.ts</p></blockquote></li><li>build // 存放webpack配置文件<blockquote><p>-- webpack.config.js</p></blockquote></li><li>index.html // 入口页面<a id="more"></a></li></ul></blockquote></blockquote><h4 id="2-2-初始化npm"><a href="#2-2-初始化npm" class="headerlink" title="2.2 初始化npm"></a>2.2 初始化npm</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h4 id="2-3-在项目中安装typescript"><a href="#2-3-在项目中安装typescript" class="headerlink" title="2.3 在项目中安装typescript"></a>2.3 在项目中安装typescript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -i typescript</span><br></pre></td></tr></table></figure><h4 id="2-4-初始化tsconfig-json文件"><a href="#2-4-初始化tsconfig-json文件" class="headerlink" title="2.4 初始化tsconfig.json文件"></a>2.4 初始化tsconfig.json文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init  <span class="comment">// 自动在根目录生成tsconfig.json并初始化配置文件</span></span><br></pre></td></tr></table></figure><p>在配置文件中的lib可以加载额外的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>],</span><br></pre></td></tr></table></figure><h4 id="2-5-安装并配置tslint来约束代码"><a href="#2-5-安装并配置tslint来约束代码" class="headerlink" title="2.5 安装并配置tslint来约束代码"></a>2.5 安装并配置tslint来约束代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i tslint -g; tslint -i</span><br></pre></td></tr></table></figure><h4 id="2-6-安装webpack相关插件"><a href="#2-6-安装webpack相关插件" class="headerlink" title="2.6 安装webpack相关插件"></a>2.6 安装webpack相关插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli webpack-dev-server -D</span><br></pre></td></tr></table></figure><h4 id="2-7-在package-json-里配置启动脚本"><a href="#2-7-在package-json-里配置启动脚本" class="headerlink" title="2.7 在package.json 里配置启动脚本"></a>2.7 在package.json 里配置启动脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"serve"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --mode=development --config build/webpack.config.js"</span></span><br></pre></td></tr></table></figure><h4 id="2-8-安装-cross-env-判断当前是开发环境还是生产环境"><a href="#2-8-安装-cross-env-判断当前是开发环境还是生产环境" class="headerlink" title="2.8 安装 cross-env 判断当前是开发环境还是生产环境"></a>2.8 安装 cross-env 判断当前是开发环境还是生产环境</h4><p>安装cross-env</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env -D</span><br></pre></td></tr></table></figure><p>在webpack配置文件中判断环境</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="literal">false</span> : <span class="string">"inline-source-map"</span>,</span><br></pre></td></tr></table></figure><h4 id="2-9-安装webpack-loader-ts-loader-来解析-ts文件"><a href="#2-9-安装webpack-loader-ts-loader-来解析-ts文件" class="headerlink" title="2.9 安装webpack loader: ts-loader 来解析 .ts文件"></a>2.9 安装webpack loader: ts-loader 来解析 .ts文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ts-loader -D</span><br></pre></td></tr></table></figure><p>在配置文件中配置rule来解析 .ts文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      use: <span class="string">"ts-loader"</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="2-10-安装-html-webpack-plugin-来配置入口视图"><a href="#2-10-安装-html-webpack-plugin-来配置入口视图" class="headerlink" title="2.10 安装 html-webpack-plugin 来配置入口视图"></a>2.10 安装 html-webpack-plugin 来配置入口视图</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>webpack配置插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"./index.html"</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2-11-在build文件夹中webpack-config-js-来配置webpack完整配置"><a href="#2-11-在build文件夹中webpack-config-js-来配置webpack完整配置" class="headerlink" title="2.11 在build文件夹中webpack.config.js 来配置webpack完整配置"></a>2.11 在build文件夹中webpack.config.js 来配置webpack完整配置</h4><h4 id="2-12-在src文件夹中main-ts-编写代码或导入模块"><a href="#2-12-在src文件夹中main-ts-编写代码或导入模块" class="headerlink" title="2.12 在src文件夹中main.ts 编写代码或导入模块"></a>2.12 在src文件夹中main.ts 编写代码或导入模块</h4><h4 id="2-13-启动项目"><a href="#2-13-启动项目" class="headerlink" title="2.13 启动项目"></a>2.13 启动项目</h4><p>启动项目，打开地址，和控制台就可以看到ts编译后运行的结果了<br>而不用一个一个文件通过指令编译了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h3 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h3><h3 id="完整webpack配置"><a href="#完整webpack配置" class="headerlink" title="完整webpack配置"></a>完整webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.ts"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"build.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">".tsx"</span>, <span class="string">".ts"</span>, <span class="string">".js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        use: <span class="string">"ts-loader"</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="literal">false</span> : <span class="string">"inline-source-map"</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    stats: <span class="string">"errors-only"</span>,</span><br><span class="line">    compress: <span class="literal">false</span>,</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8888</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s/wnL1l-ERjTDykWM76l4Ajw" target="_blank" rel="noopener">TypeScript(二)使用Webpack搭建环境</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近简单学习了一下ts发现还真有点香，借双休总结回顾一下，先来回顾搭建一个可以运行ts文件的环境，这样后面编译ts就方便了&lt;/p&gt;
&lt;h3 id=&quot;1-安装typescript&quot;&gt;&lt;a href=&quot;#1-安装typescript&quot; class=&quot;headerlink&quot; title=&quot;1 安装typescript&quot;&gt;&lt;/a&gt;1 安装typescript&lt;/h3&gt;&lt;h4 id=&quot;1-1-在拥有node的系统环境通过npm安装typescript&quot;&gt;&lt;a href=&quot;#1-1-在拥有node的系统环境通过npm安装typescript&quot; class=&quot;headerlink&quot; title=&quot;1.1 在拥有node的系统环境通过npm安装typescript&quot;&gt;&lt;/a&gt;1.1 在拥有node的系统环境通过npm安装typescript&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install typescript -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-查看版本检查是否安装成功&quot;&gt;&lt;a href=&quot;#1-2-查看版本检查是否安装成功&quot; class=&quot;headerlink&quot; title=&quot;1.2 查看版本检查是否安装成功&quot;&gt;&lt;/a&gt;1.2 查看版本检查是否安装成功&lt;/h4&gt;  &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安装成功后就可以通过指令编译ts文件了-会在目录生成对应js文件&quot;&gt;&lt;a href=&quot;#安装成功后就可以通过指令编译ts文件了-会在目录生成对应js文件&quot; class=&quot;headerlink&quot; title=&quot;安装成功后就可以通过指令编译ts文件了,会在目录生成对应js文件&quot;&gt;&lt;/a&gt;安装成功后就可以通过指令编译ts文件了,会在目录生成对应js文件&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc main.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;感觉老是这样通过指令编译感觉很麻烦，那可以通过webpack配置对应的loader编译ts文件&lt;/p&gt;
&lt;h3 id=&quot;2-配置webpack-编译ts&quot;&gt;&lt;a href=&quot;#2-配置webpack-编译ts&quot; class=&quot;headerlink&quot; title=&quot;2 配置webpack 编译ts&quot;&gt;&lt;/a&gt;2 配置webpack 编译ts&lt;/h3&gt;&lt;h4 id=&quot;2-1-创建项目目录&quot;&gt;&lt;a href=&quot;#2-1-创建项目目录&quot; class=&quot;headerlink&quot; title=&quot;2.1 创建项目目录&quot;&gt;&lt;/a&gt;2.1 创建项目目录&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;目录结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;src //存放源文件&lt;blockquote&gt;
&lt;p&gt;-- main.ts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;build // 存放webpack配置文件&lt;blockquote&gt;
&lt;p&gt;-- webpack.config.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;index.html // 入口页面
    
    </summary>
    
    
      <category term="ts" scheme="https://gentlyjian.github.io/categories/ts/"/>
    
    
      <category term="ts基础" scheme="https://gentlyjian.github.io/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js继承</title>
    <link href="https://gentlyjian.github.io/posts/5993bb22/"/>
    <id>https://gentlyjian.github.io/posts/5993bb22/</id>
    <published>2020-06-13T01:50:05.000Z</published>
    <updated>2020-06-13T02:51:18.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h3><p>又到了双休，但是手机老是给我提示暴雨预警，哪都不敢去。所以借着这个时机来复习一下js基础中的继承，顺便总结一下中间踩到的坑，每个实例的代码都全部写下来，虽然有很多是重复的但是这样方便查看和理解，如有错误欢迎指点^_^</p><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>原型链继承，就是让子类的原型属性指向父类的实例，这样子类没有在自己的实例里找到属性就会去原型上找（此时是父类的实例），再没有找到就去父类原型上找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.supArr = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'super'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为父类原型添加方法</span></span><br><span class="line">Super.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：为子类原型添加方法, 改变子类原型对象后获取不到此方法 ×</span></span><br><span class="line">Sub.prototype.saySubName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'saySubName1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子类的原型对象指向父类实例</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super()</span><br><span class="line"><span class="comment">// 改变子类原型后，为子类原型添加方法 √</span></span><br><span class="line">Sub.prototype.saySubName2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'saySubName2'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype.sayArr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.supArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子类实例</span></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Sub()</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Sub()</span><br><span class="line"></span><br><span class="line">sub1.name =<span class="string">'aaa'</span></span><br><span class="line">sub2.name = <span class="string">'bbb'</span></span><br><span class="line">sub1.sayName() <span class="comment">// aaa</span></span><br><span class="line">sub2.sayName() <span class="comment">// bbb</span></span><br><span class="line">sub1.supArr.push(<span class="string">'c'</span>) </span><br><span class="line">sub2.sayArr() <span class="comment">// ['a', 'b'] -&gt; ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>使用原型链继承，可以帮助我们更加深刻的理解原型，但是也有很多缺点<br>缺点，1.修改父类引用类型，所有子类实例都会受到影响<br>2.不能实现多继承 3.不能向父类构造函数传参</p><a id="more"></a><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><p>构造函数继承就是在子类的构造函数中通过call或apply方法，调用父类构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.supArr = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为父类原型添加方法,通过构造函数继承，子类并不能获取到父类的原型</span></span><br><span class="line"><span class="comment">// Super.prototype.sayName = function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.name)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Super.prototype.sayArr = function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.supArr)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 通过 call 或者 apply 调用父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype.sayArr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.supArr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Sub(<span class="string">'zzj'</span>)</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Sub(<span class="string">'sjj'</span>)</span><br><span class="line">sub1.sayName() <span class="comment">// zzj</span></span><br><span class="line">sub2.sayName() <span class="comment">// sjj</span></span><br><span class="line"><span class="comment">// 在 sub1里push c</span></span><br><span class="line">sub1.supArr.push(<span class="string">'c'</span>)</span><br><span class="line"><span class="comment">// sub2里的arr不会受到影响</span></span><br><span class="line">sub2.sayArr() <span class="comment">// ['a', 'b']</span></span><br></pre></td></tr></table></figure><p>在这里本能的去父类原型上写方法，但是在调用的时候并获取不到父类的方法，<br>这是因为在子类通过call调用父类构造函数时，只是拷贝了父类中实例的属性<br>优点：1.可以向父类构造函数传参， 2. 引用类型不会受到其他实例的影响<br>缺点：1. 定义的方法不能复用，每个实例都会重新定义原型上的方法</p><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合继承是结合原型链继承和构造函数继承，弥补了原型链继承不能传参和引用类型的改变会影响到其他实例，也弥补了构造函数继承只能在子类中定义方法，每个实例都会重新定义一次方法的缺点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.supArr = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为父类原型添加方法</span></span><br><span class="line">Super.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 call 或者 apply 调用父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第二次调用</span></span><br><span class="line">  Super.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子类的原型对象指向父类实例</span></span><br><span class="line"><span class="comment">// 第一次调用</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super()</span><br><span class="line">Sub.prototype.sayArr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.supArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Sub(<span class="string">'zzj'</span>)</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Sub(<span class="string">'sjj'</span>)</span><br><span class="line">sub1.sayName() <span class="comment">// zzj</span></span><br><span class="line">sub2.sayName()  <span class="comment">// sjj</span></span><br><span class="line"><span class="comment">// 在 sub1里push c</span></span><br><span class="line">sub1.supArr.push(<span class="string">'c'</span>)</span><br><span class="line"><span class="comment">// sub2里的arr不会受到影响</span></span><br><span class="line">sub2.sayArr() <span class="comment">// [ 'a', 'b' ]</span></span><br></pre></td></tr></table></figure><p>虽然弥补了缺陷，但是子类调用构造函数时通过call拷贝了父类上的实例属性，然后子类又通过原型指向了父类的实例，那么子类原型上又有了父类上的实例属性。<br>优点： 1.结合了 原型链继承 和构造函数继承，弥补了各自的缺陷<br>缺点： 调用了两次父类构造函数，导致子类实例和原型上都有父类实例上的属性</p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>原型式继承，就是基于已有对象，创建一个新对象和Object.create类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object</span>(<span class="params">sup</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个中间函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 将函数的原型指向sup</span></span><br><span class="line">  Fn.prototype = sup</span><br><span class="line">  <span class="comment">// 返回函数的实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'super'</span>,</span><br><span class="line">  arr: [<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayArr() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>(person)</span><br><span class="line"><span class="keyword">let</span> newObj2 = <span class="built_in">Object</span>(person)</span><br><span class="line">newObj.name = <span class="string">'newObj'</span></span><br><span class="line">newObj2.name = <span class="string">'newObj2'</span></span><br><span class="line">newObj2.sayName() <span class="comment">// newObj2</span></span><br><span class="line">newObj.sayName() <span class="comment">// newObj</span></span><br><span class="line"><span class="comment">// 修改 newObj里的数组会影响到其他实例</span></span><br><span class="line">newObj.arr.push(<span class="string">'c'</span>) </span><br><span class="line">newObj2.sayArr() <span class="comment">// [ 'a', 'b', 'c' ]</span></span><br></pre></td></tr></table></figure><p>缺点和原型链继承一样</p><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p>结合上面三个，将子类的原型指向通过Object函数创建的中间函数的原型，因为中间函数没有实例属性，这样子类原型上就不会有父类属性，这句话看代码就理解啦。中间我产生了一个疑问为什么不直接让子类原型指向父类原型呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型式函数,创建一个中间函数,让中间函数的原型指向父类原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjectCreate</span>(<span class="params">sup</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = sup.prototype;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生函数,对子类操作的封装,主要是来弥补子类原型构造函数的缺失,和让子类构造函数指向中间函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">sub, sup</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = ObjectCreate(sup); <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.constructor = sub; <span class="comment">// 增强对象</span></span><br><span class="line">  sub.prototype = prototype; <span class="comment">// 指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.supArr = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为父类原型添加方法</span></span><br><span class="line">Super.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 call 或者 apply 调用父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Super.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：定义子类原型方法不能在 寄生组合继承操作之前， 因为子类的原型指向被改变了</span></span><br><span class="line"><span class="comment">// Sub.prototype.sayArr = function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.supArr)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将子类的原型对象指向父类实例</span></span><br><span class="line"><span class="comment">// Sub.prototype = new Super()</span></span><br><span class="line"><span class="comment">// 不采用上面的方法，采用寄生原型式</span></span><br><span class="line">inherit(Sub, Super)</span><br><span class="line"><span class="comment">// 疑问？ 为什么不直接让子类原型直接指向父类原型呢</span></span><br><span class="line"><span class="comment">// 因为这样实例修改了或增加的原型上的属性，那么原型就改变了会影响到其他实例</span></span><br><span class="line"><span class="comment">// Sub.prototype = Super.prototype</span></span><br><span class="line"><span class="comment">// 定义子类原型方法应该在寄生组合继承操作之后</span></span><br><span class="line">Sub.prototype.sayArr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.supArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Sub(<span class="string">'zzj'</span>)</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Sub(<span class="string">'sjj'</span>)</span><br><span class="line"></span><br><span class="line">sub1.sayName() <span class="comment">// zzj</span></span><br><span class="line">sub2.sayName()  <span class="comment">// sjj</span></span><br><span class="line"><span class="comment">// 在 sub1里push c</span></span><br><span class="line">sub1.supArr.push(<span class="string">'c'</span>)</span><br><span class="line"><span class="comment">// console.log(sub1)</span></span><br><span class="line"><span class="comment">// console.log(sub2)</span></span><br><span class="line"><span class="comment">// sub2里的arr不会受到影响</span></span><br><span class="line">sub1.sayArr()</span><br><span class="line">sub2.sayArr() <span class="comment">// [ 'a', 'b' ]</span></span><br></pre></td></tr></table></figure><p>优点： 完美<br>缺点： 踩的坑有点多， 1.在Object函数中 应该是将父类原型赋值给 中间函数，而不是父类构造函数， 2. 定义子类原型方法应该在寄生组合操作之后</p><p>掌握到这些，那js的继承应该就差不多了，不过现在我更喜欢ES6的class中extend继承，但是这些理解了，有木有感觉自己又变强了^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js继承&quot;&gt;&lt;a href=&quot;#js继承&quot; class=&quot;headerlink&quot; title=&quot;js继承&quot;&gt;&lt;/a&gt;js继承&lt;/h3&gt;&lt;p&gt;又到了双休，但是手机老是给我提示暴雨预警，哪都不敢去。所以借着这个时机来复习一下js基础中的继承，顺便总结一下中间踩到的坑，每个实例的代码都全部写下来，虽然有很多是重复的但是这样方便查看和理解，如有错误欢迎指点^_^&lt;/p&gt;
&lt;h4 id=&quot;原型链继承&quot;&gt;&lt;a href=&quot;#原型链继承&quot; class=&quot;headerlink&quot; title=&quot;原型链继承&quot;&gt;&lt;/a&gt;原型链继承&lt;/h4&gt;&lt;p&gt;原型链继承，就是让子类的原型属性指向父类的实例，这样子类没有在自己的实例里找到属性就会去原型上找（此时是父类的实例），再没有找到就去父类原型上找&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.supArr = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;super&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为父类原型添加方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Super.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意：为子类原型添加方法, 改变子类原型对象后获取不到此方法 ×&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype.saySubName1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;saySubName1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将子类的原型对象指向父类实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Super()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改变子类原型后，为子类原型添加方法 √&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype.saySubName2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;saySubName2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype.sayArr = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.supArr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建子类实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sub1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sub2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub1.name =&lt;span class=&quot;string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub2.name = &lt;span class=&quot;string&quot;&gt;&#39;bbb&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub1.sayName() &lt;span class=&quot;comment&quot;&gt;// aaa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub2.sayName() &lt;span class=&quot;comment&quot;&gt;// bbb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub1.supArr.push(&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub2.sayArr() &lt;span class=&quot;comment&quot;&gt;// [&#39;a&#39;, &#39;b&#39;] -&amp;gt; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用原型链继承，可以帮助我们更加深刻的理解原型，但是也有很多缺点&lt;br&gt;缺点，1.修改父类引用类型，所有子类实例都会受到影响&lt;br&gt;2.不能实现多继承 3.不能向父类构造函数传参&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://gentlyjian.github.io/categories/js/"/>
    
    
      <category term="js基础" scheme="https://gentlyjian.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>v-html中的dom绑定事件</title>
    <link href="https://gentlyjian.github.io/posts/8f15cc15/"/>
    <id>https://gentlyjian.github.io/posts/8f15cc15/</id>
    <published>2020-05-10T07:03:55.000Z</published>
    <updated>2020-09-05T03:42:15.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>后台返回数据为HTML，通过v-html渲染页面后，jquery为数据里的Dom添加事件</p><h4 id="后台数据与渲染"><a href="#后台数据与渲染" class="headerlink" title="后台数据与渲染"></a>后台数据与渲染</h4><p>这是后台返回的数据<img src="/posts/8f15cc15/data.png" class="" title="example"><br>这是通过v-html渲染到页面<img src="/posts/8f15cc15/html.png" class="" title="example"></p><h4 id="添加点击事件失败"><a href="#添加点击事件失败" class="headerlink" title="添加点击事件失败"></a>添加点击事件失败</h4><p>在vue声明周期mounted添加事件,并没有添加到，甚至连dom都没有获取到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.app-link'</span>))</span><br><span class="line">mounted() &#123;</span><br><span class="line">    $(<span class="string">'.app-link'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'1111111111'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><a id="more"></a><p>在mounted里使用 setTimeout也没有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      $(<span class="string">'.app-link'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'1111111111'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>通过一番倒腾，最终在updated里添加事件成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">      $(<span class="string">'.app-link'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'1111111111'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>最好在beforeUpdate里清空要添加dom的点击事件，不然每次执行updated，都会在click事件里添加一个function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeUpdate() &#123;</span><br><span class="line">    $(<span class="string">'.app-link'</span>).off();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后台返回数据为HTML，通过v-html渲染页面后，jquery为数据里的Dom添加事件&lt;/p&gt;
&lt;h4 id=&quot;后台数据与渲染&quot;&gt;&lt;a href=&quot;#后台数据与渲染&quot; class=&quot;headerlink&quot; title=&quot;后台数据与渲染&quot;&gt;&lt;/a&gt;后台数据与渲染&lt;/h4&gt;&lt;p&gt;这是后台返回的数据&lt;img src=&quot;/posts/8f15cc15/data.png&quot; class=&quot;&quot; title=&quot;example&quot;&gt;&lt;br&gt;这是通过v-html渲染到页面&lt;img src=&quot;/posts/8f15cc15/html.png&quot; class=&quot;&quot; title=&quot;example&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;添加点击事件失败&quot;&gt;&lt;a href=&quot;#添加点击事件失败&quot; class=&quot;headerlink&quot; title=&quot;添加点击事件失败&quot;&gt;&lt;/a&gt;添加点击事件失败&lt;/h4&gt;&lt;p&gt;在vue声明周期mounted添加事件,并没有添加到，甚至连dom都没有获取到&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($(&lt;span class=&quot;string&quot;&gt;&#39;.app-link&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mounted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&#39;.app-link&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      event.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1111111111&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://gentlyjian.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://gentlyjian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于for的一系列</title>
    <link href="https://gentlyjian.github.io/posts/988e810e/"/>
    <id>https://gentlyjian.github.io/posts/988e810e/</id>
    <published>2020-04-24T00:57:20.000Z</published>
    <updated>2020-05-10T07:56:22.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>遍历数组常用for循环 ES5遍历数组的方法有forEach,map,filter,some，every,reduce等<br> 使用forEach不能使用break和return跳出循环</p><p>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</span><br><span class="line">myArray.name = <span class="string">"数组"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>,len = myArray.length; j &lt; len; j++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a>for...in</h5><p>使用for in 遍历数组的毛病</p><p>1.index是字符串<br>2.遍历顺序可能不是数组的内部顺序<br>3.会遍历数组的可枚举对象包括原型，例如上面的method和name<br>所以for in 不适合遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index,myArray[index])</span><br><span class="line"><span class="comment">//   0 a</span></span><br><span class="line"><span class="comment">//   1 b</span></span><br><span class="line"><span class="comment">//   2 c</span></span><br><span class="line"><span class="comment">//   3 d</span></span><br><span class="line"><span class="comment">//   name 数组</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.length)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-of"><a href="#for-of" class="headerlink" title="for...of"></a>for...of</h5><p>使用for of 遍历的是数组的值而 for in 遍历的是数组的键名<br>for of遍历只会遍历数组自身的值，而不会去遍历原型和其他属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><h5 id="1-使用for-in遍历对象"><a href="#1-使用for-in遍历对象" class="headerlink" title="1.使用for in遍历对象"></a>1.使用for in遍历对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  a: <span class="string">"apple"</span>,</span><br><span class="line">  b: <span class="string">"banane"</span>,</span><br><span class="line">  c: <span class="string">"cherry"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i,myObj[i])</span><br><span class="line"><span class="comment">// 会遍历到原型上的方法和属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想遍历原型上的方法和属性可以使用hasOwnPropery<br>hasOwnPropery可以判断某属性是否是对象的实例属性，从而过滤掉原型上的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="keyword">if</span>(myObj.hasOwnProperty(i)) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i, myObj[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只获取自身属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-of-1"><a href="#for-of-1" class="headerlink" title="for...of"></a>for...of</h5><p>也可以使用for of 搭配Object.keys 来遍历对象 返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).<br>相关的Object属性还有<br>Object.getOwnPropertyNames(obj) 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).<br>使用Reflect.ownKeys(obj)遍历 返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(myObj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, myObj[key])</span><br><span class="line">  <span class="comment">// 不包含原型属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果实在想用 for of遍历对象，可以给该对象添加Symbol.iterator迭代器接口<br>接口自己实现<br>for of循环会先调用集合的Symbol.iterator方法，然后返回一个新的迭代器对象，<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法<br>每循环一次调用一次<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法var<br>使用Genertaor 自带next()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.a;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.b;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实现一个简单的迭代器</span></span><br><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(self);</span><br><span class="line">  <span class="keyword">const</span> len = keys.length;</span><br><span class="line">  <span class="keyword">let</span> pointer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"> next() &#123;</span><br><span class="line">   <span class="keyword">const</span> done = pointer &gt;= len;</span><br><span class="line">   <span class="keyword">const</span> value = !done ? self[keys[pointer++]]: <span class="literal">undefined</span>;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     done,</span><br><span class="line">     value</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用for of 遍历Map对象 顺便回顾一下Map对象的基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">"a"</span>, <span class="string">"apple"</span>],</span><br><span class="line">  [<span class="string">"b"</span>, <span class="string">"banane"</span>],</span><br><span class="line">  [<span class="string">"c"</span>, <span class="string">"cherry"</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 给Map对象添加属性</span></span><br><span class="line"><span class="built_in">console</span>.log(myMap.set(<span class="string">'d'</span>, <span class="string">'durian'</span>)) <span class="comment">// 返回是添加之后的Map</span></span><br><span class="line"><span class="comment">// 判断key是否存在 返回值 是否存在</span></span><br><span class="line">myMap.has(<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.has(\'a\'): '</span>, myMap.has(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.delete('a') // 删除属性 返回值 是否删除成功</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.delete(\'a\'): '</span>, myMap.delete(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.get('d') // 获取属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.get(\'d\') : '</span>, myMap.get(<span class="string">'d'</span>) );</span><br><span class="line">使用数组结构 <span class="built_in">Map</span>的item</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, val] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>for of 使用于遍历数组/数组对象[{},{}]/字符串/map/set等有迭代器对象的集合<br>但不能遍历对象，应为对象没有迭代器对象,它可以正确的相应break、continue、return语句<br>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/zjx304/p/10687017.html" target="_blank" rel="noopener">for in 和for of的区别</a><br><a href="https://blog.csdn.net/kuangshp128/article/details/85342343" target="_blank" rel="noopener">ES6可迭代对象与迭代器的理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;遍历数组&quot;&gt;&lt;a href=&quot;#遍历数组&quot; class=&quot;headerlink&quot; title=&quot;遍历数组&quot;&gt;&lt;/a&gt;遍历数组&lt;/h4&gt;&lt;h5 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h5&gt;&lt;p&gt;遍历数组常用for循环 ES5遍历数组的方法有forEach,map,filter,some，every,reduce等&lt;br&gt; 使用forEach不能使用break和return跳出循环&lt;/p&gt;
&lt;p&gt;es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.method = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myArray.name = &lt;span class=&quot;string&quot;&gt;&quot;数组&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len = myArray.length; j &amp;lt; len; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myArray[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://gentlyjian.github.io/categories/js/"/>
    
    
      <category term="js基础" scheme="https://gentlyjian.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="https://gentlyjian.github.io/posts/2ba55f9f/"/>
    <id>https://gentlyjian.github.io/posts/2ba55f9f/</id>
    <published>2020-04-22T02:38:48.000Z</published>
    <updated>2020-05-10T07:56:17.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="使用Object-assign将原对象的值分配给一个新对象"><a href="#使用Object-assign将原对象的值分配给一个新对象" class="headerlink" title="使用Object.assign将原对象的值分配给一个新对象"></a>使用Object.assign将原对象的值分配给一个新对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">name: <span class="string">'zzj'</span></span><br><span class="line">age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要在Object.assign 重新定义一个&#123;&#125; 然后将obj复制到&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">// 修改objCp 的属性 不会影响原来的对象</span></span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// &#123; name: 'zzj', age: '23' &#125; &#123; name: 'zzj', age: '22' &#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="使用ES6的扩展运算符"><a href="#使用ES6的扩展运算符" class="headerlink" title="使用ES6的扩展运算符"></a>使用ES6的扩展运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = &#123;...obj&#125;</span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// 效果同上</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法"><a href="#使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法" class="headerlink" title="使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法"></a>使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能拷贝方法 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure><h5 id="编写一个深拷贝函数"><a href="#编写一个深拷贝函数" class="headerlink" title="编写一个深拷贝函数"></a>编写一个深拷贝函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写一个函数</span></span><br><span class="line"><span class="comment">// 1. 判断传入的值是否是 对象 如果是进行拷贝，否则直接返回</span></span><br><span class="line"><span class="comment">// 2. 判断传入的值 是对象还是数组 给该值初始化&#123;&#125;或者[]</span></span><br><span class="line"><span class="comment">// 3.进行递归</span></span><br><span class="line"><span class="comment">// 深拷贝函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCp</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 判断是不是&#123;&#125;或者Array</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data === <span class="string">'object'</span> &amp;&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 判断该值是对象还是数组</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">typeof</span> data.length === <span class="string">'number'</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="comment">// 进行递归，对子项进行判断</span></span><br><span class="line">      val[item] = deepCp(data[item])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = deepCp(obj)</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h3&gt;&lt;h4 id=&quot;使用Object-assign将原对象的值分配给一个新对象&quot;&gt;&lt;a href=&quot;#使用Object-assign将原对象的值分配给一个新对象&quot; class=&quot;headerlink&quot; title=&quot;使用Object.assign将原对象的值分配给一个新对象&quot;&gt;&lt;/a&gt;使用Object.assign将原对象的值分配给一个新对象&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name: &lt;span class=&quot;string&quot;&gt;&#39;zzj&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	age: &lt;span class=&quot;string&quot;&gt;&#39;22&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 要在Object.assign 重新定义一个&amp;#123;&amp;#125; 然后将obj复制到&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; objCp = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 修改objCp 的属性 不会影响原来的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objCp.age = &lt;span class=&quot;string&quot;&gt;&#39;23&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(objCp, obj) &lt;span class=&quot;comment&quot;&gt;// &amp;#123; name: &#39;zzj&#39;, age: &#39;23&#39; &amp;#125; &amp;#123; name: &#39;zzj&#39;, age: &#39;22&#39; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://gentlyjian.github.io/categories/js/"/>
    
    
      <category term="js基础" scheme="https://gentlyjian.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2019回顾</title>
    <link href="https://gentlyjian.github.io/posts/5517bb68/"/>
    <id>https://gentlyjian.github.io/posts/5517bb68/</id>
    <published>2019-12-29T13:33:55.000Z</published>
    <updated>2020-06-13T02:48:52.261Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="eb36316962f23bdc9be4ece0d02cb19d937cf39cee555c2987c72c6404802fd2">cf4fb014cf36a6c299418abf18364b46f85e42dcc416fd9d51cb6461c3a95ae028f01439b820667412c9a0b4b25d2e157fab2bd1636ab4a99acceb5ee12e3dd6ad04b6466c215d078675c0f9a83736eae561c487dee891333de3dc559fd3aec7ed175500ec96fd10be05ad229df0a32b5c4daee755711cf063331f8d8d604cef09c2f74347973ccbf7e3f32eeef165c797c5b87797822d534fa51ff8633040e4b74d17a17c3a44cde8d9eaa646b804c6ed43f6f6ed4f50775d6afea400a870283c60ce9954de47cd6379614bdfe113b6366739ff58b9584e0989533f3fd7c0d864316e8205b9a6ba2af1a952e3cc0151872a0de32022fe6dda6b29398bab1b5bb1745dee30345b92f3ea8751c899f4f09c70f8880ecec1bee285334c668878788e2f424b6f3e9684895ef2bd87730635d1817e2bdbf2f17c7cb949bf43ef976fb84ccfadee488e24a947d60c15c1cc8be9c0e6e3f0389652ba27dd119a0483b945d10dcbfc152eeb7e7d4cd179819d74cc01748a2de4808d667580cfb9ff911ce7576e2e44650cadcc6576a5bd1f20adac03f1e9d78302777a12fd8056d19f14fca9c44a329d4e7f9a3e6a2633dd6cdb9c6f0e9b6a17c00d0d9451adea062c9592167880d12d17b77a9bc840478f4889cdfda1645caae9bc9746f2a809d8cb879c20d573fb31936c4895ff82a23bae7886b455eb4c0de4e9164db7f3f77667a7766211c25daa2ecc50a0b3e56f4a37731faa5a25f06e3506048ada65b5039b79c9679067ee0bcd1ddf0bda19bf8432a6b6cc245086ad894dcc5678fda9dd378f2d7ce108ac924e12ecaaef94c579b63b6583491e45c39fd9e480b63038bc4612da45d9e46b39308cb84f6a93dc8e0b74e898ab22017241105983df3de275703101b14bae74ee1046bd8fa330f7fd0edb0b6087e7d59667c229704791cacc83861ebbea93e3786078f5347eb2ca60f8f686989198e0084d645177b00d054a75769c2da9c016922ba2196b0ab05f5786f849ab0885b7681488d29d5dd9274969925fb896ad183e51dcedf08ba2e7d2051fafbffc3a1cf22adeae98e6d72123aef9316387f33daf28cfede9d9bf2bf165d20fc7e24adbd8d65eaf3dbadbb317b06cf983af93fa7d63996f72bade9a5d8404400fe1f8b23fe4768f8954e638ca021dc9da8f6eff12ed90ea276c288efd7a1624c667b26b4ae692ae7360663a7491c09452e89841a7c500204143ae7ab07d361a70a9f52eb36959c1b71ada39411c3f01f3326e9abc8794d759c4d622f0c9f7f9f8895fce366c9f55bab63c1ec32699141e460770ff868d8a95a37f81b23d74f8417f6642cbca2f98cf5c253496b5d95911ae5777816038bf2c7ff1e08e74c5efcc11bf04e0d08b3fbaa55a1093295301338da9796d1195687f474f8bce0f635fb8d1206b19e87e7f73be86a2789c4e35beb255a3c77a30574ba7234ab78c70ed8177a9b859486044589f434d844dc3a8234ce6f4a578b3f181bd1467ad8cc8d5624fddcb44b3f67edd3780e3ddbb19fdf479b26d8e03c7175b8192d8c88f55a593bb8e5156d51863dd9b839c08ede8b89646f07e462a05909514cce94f11bdbc977f67ffae1ab79d0b9b71708a4752f0ccf4304b8304cc8a51ead1dc69ad35399344f2e9562143be03f75830153295be1208b518ce03743e623500117455e1029bc4ca51274d47c4d9825ed9369f947e1adaff5e1bfd7afb258a3012657f0946ee0f5df8b40ff632f05bf2544a542809846a3200673543e713084ff29a7e02b8398c84b12ff0d94d3fbbdf82051d0373f2df340812b70c13164beec2c3814d6548386e611c02c0b45949111fe9b8c858a5e3f107fd9baeb98210ea78329c432e7e51b666a3f2952c5b8130a6044c5f85d30595eb0e1b6dc0cca3035288f1944634179bc43198110f6842eb159a90890f6f273134e25729a5263616af6dccbe142389f6f2ea9f5e122ae34b4d6580f5e4c461f7df0602d6f521e00b956285c34f0f7ddd8c0d3596ef9bdef930c03be02add6c155a0d118fb6bfa9db807822c1937bd86636630caeb748580e127735e9267c36bcc7b58357da9c5757347325b9e67abdfa85f64f42f53ad3f301bd2807c41188d270993a50dc61aebfb6bad92cafe014ab942dd8dc703871344792d2cf55accd13afc512a9ca9c50618ed9c6f471fb145fdf74da730e6f90f11d447a6f20049fe39ad317fb2c5e6686e5f3286f423f3b9ffa24ba8f13fe6a327fa61eff646fa86defa8ada10115ec2985bda30a3e97897b65db247d46021c4df3564296de91e98983a8c4a848bb74d898036b0afa9424a7bfed161797c629b3f53c60993a47531ab58cc28cf9caec5eed54f58cc2eb811592316b7c4d9406818a52a61f607c368ea0be77cb86be11863bd114c42e1534cfd413d51bf01ebeade0953b9cd55f6010f61fb9e20017a757ec3063a4af6ff0fd4e213aa8ca4df8f47eb63a955ff4605dcc309aebb10fc7709e2a80b9e1a686439a7ae7285cbcbf6003f859e2e41dc48c327a6f0a5390304a09f6c264751b6433704efefd079688d93e3be391028f58bde05898fb9f9f05378f87c598780727aba2f9e457079e7a4385baf07cc285d1213384175a985222bf8743a0d50015c6761d136236f6e3471d706f259755c8cb6e559c594666afe1abd213b72f4daabb94df8a37e590deecc85e116e409b1d349de3a9a7e1b99ca1bc431a7dfbde31a48a053925b02a1c3c6961af81b029108282c10056b4a91da770ffbbbe851217db6e9fdbed8fbf5c8cdbfc7d2c1b7fafd73a53b5ce0eaa679fdfef133e13ea1b2ba78c5170285bbc66e0372212acee3f8280ca538897ba7a4ec8d43eeb91359649dafdd54b4042ba7c9d0449ab18b0671ef7dd89193b5a2ed8510300d16fafe8c6e9f34a761f73fa3d07584909619d270a0fdef156c22c3608985433d39c70d15a963e5ebd504a679987e011a64fd5d80267ec7e1540a44c502fb186916c85c69d40297dc782aa61b4ecdd52ea542730d2dda9458bedc8ca102a33ef28d00bc19950ca17bd539749eb595eca9395952f5e26c5cd31daa0ed6085919aece3729c9f650948e742eaf788212ebea9fc98d4d168fafae115edd1b739d62f126f84cb279f3119202ca1fe15c40c388a6c4c8fc4ea07250d22775c97e315011ee7d89273feb01d2daa5dc3ad2048c70fcd27ce23bc62092e469116d419aeab776acea0f45a830fa0d744347abf937c060ff4326d2d434c50bffcb86cf7518ac6276635ecf9807950c1c67ef532d2b8d8b6ee1cd91da232e1ae36ef5cd2c92055f456ee7012d8f90aa903cf1285c2b4164195882f90d3df23db2f5457b7fc501c7e6721353c78f58a03714333a697052c400faaecf2abb292ca9c4d6ed44c07acb8a56c1b4151b5ec2d08d3a748297e95f42ba2995c7b399e7b7381f41c822488f54c74bb24ec7f63663fa2467813d13ae09684c02e62aff4daf44f4e995f57afc6be1627bd7b438cb9167abf0186ce5d24991bc588995948aea7f5f6ff27c1de9431fc288d9fbecadada43f13ba61e1fa05e83c7c0862ed5ad1f8dfad7b9b51f676b52e866a92092a340d0a3ae0baf49911194a625014ed288d9c04847ef99fb8516efe5605106b01cd1d342ccec632c65747a31656b54e6fe8e098d47a20b4b6b31d7020b0929e0a63d5516b1a37cb4346779c60769bae01f107c288fd91312b22a0b128988aa285312e88ac6dee12aab36c69b342b098be9cd0bd520c935e40d76d435ed1344e6a8ddf9eb92cb7474273e72c4cbc3ed8ab39387e614cc90772b5cf4e25e0839daa517c797d2824b09806d238a6ec963edfdfca9131f41caf222b24ca06613bf3351743ea4497bdbde6686bcc44ce4d89605d114529ff917677ad5c94ee5fa6364743eec103834d9eed3</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      该篇是加密文章，需要输入密码查看.&lt;/br&gt;
    
    </summary>
    
    
      <category term="daily" scheme="https://gentlyjian.github.io/categories/daily/"/>
    
      <category term="2019" scheme="https://gentlyjian.github.io/categories/daily/2019/"/>
    
    
      <category term="hide" scheme="https://gentlyjian.github.io/tags/hide/"/>
    
  </entry>
  
  <entry>
    <title>辞职辞后感</title>
    <link href="https://gentlyjian.github.io/posts/7997947e/"/>
    <id>https://gentlyjian.github.io/posts/7997947e/</id>
    <published>2019-10-21T13:33:55.000Z</published>
    <updated>2020-06-21T02:00:24.019Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="46a950508635abd594833d1f4269d412b11346c67da98039c3cd444c7e9824c1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      该篇是加密文章，需要输入密码查看.&lt;/br&gt;
    
    </summary>
    
    
      <category term="daily" scheme="https://gentlyjian.github.io/categories/daily/"/>
    
      <category term="2019" scheme="https://gentlyjian.github.io/categories/daily/2019/"/>
    
    
      <category term="hide" scheme="https://gentlyjian.github.io/tags/hide/"/>
    
  </entry>
  
  <entry>
    <title>重回科技园</title>
    <link href="https://gentlyjian.github.io/posts/ad0b1c4e/"/>
    <id>https://gentlyjian.github.io/posts/ad0b1c4e/</id>
    <published>2019-08-11T14:49:13.000Z</published>
    <updated>2020-06-13T02:49:10.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>&emsp;&emsp;兜兜转转我又回到了wd科技园，哈哈和这里还真有一股虐缘，逃也逃不掉。或许自己当初选择了在广东入职估计生活就会变成另一番模样吧。这样一想突然发现生活还真是有趣，到处充满着选择，如果不想去闯荡那么以后的生活就会变成你熟悉的样子，如果选择了自己没有很大把握的那一条路，那么生活就会给你很多新鲜的东西，即使没有走通那条路，那一路的新鲜事物也会是不错的宝藏。平平淡淡也好，刺激新鲜也好，自己喜欢是才是最好的。</p><hr><p>&emsp;&emsp;想起昨天和货拉拉司机的对话，感觉收获还不少。他说武汉在他们那年代比深圳好多了，结果深圳这一个农村现在发展的比武汉还好。这人的思想眼光还是很重要啊。就比如现在武汉的房子，武汉这房价在 15 年之前还是 5000-8000 左右，现在都已经翻了两倍，有些人在那时候就看到了这趋势便把家里的房子卖了到武汉买了房，那现在就好好赚了一笔。但是人生的选择也是有风险的，你们现在还年轻，20 多岁是好好打基础的时候，有些路多走走就算走错了那也还有精力调整，等到了 30 多岁有了家庭孩子，那你就没有多余的路去走了，走错了可能就会一直穷下去，走对了那肯定就会一直好下去。所以 20 多岁好好打打基础当然也别一位的只注重技术上的提升还要提升一下眼光，多走走路。等机会到了一下抓住，人生可能就只有那一次的机会让你好下去了。你们现在 20 多岁身体也行，认知能力也是最好的时候，现在苦一点，多学一点，那你现在的一年就抵得到以后三四十岁的 5 年，等到了 40 岁人生就开始走下坡路了云云。</p><hr><p>&emsp;&emsp;这货拉拉司机的一番话还真是人生的一剂良药，打的还挺及时的，到了目的地还帮我搬了一下行李，我也先把最重的都搬到门口，毕竟 57 岁快退休的人就算精神面貌很好，也还是不要做些活动量太大的事情。等东西搬的差不多，这附近却找不到一家商店买水，司机也说算了，这本来就是他的工作，和司机道谢后便告别了。这里突然想起了老爸，哎，老爸还在那修一下铁疙瘩，以后还是劝他早点回来歇息着吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="daily" scheme="https://gentlyjian.github.io/categories/daily/"/>
    
      <category term="2019" scheme="https://gentlyjian.github.io/categories/daily/2019/"/>
    
    
      <category term="hide" scheme="https://gentlyjian.github.io/tags/hide/"/>
    
  </entry>
  
</feed>
