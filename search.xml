<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于for的一系列</title>
    <url>/posts/988e810e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>遍历数组常用for循环 ES5遍历数组的方法有forEach,map,filter,some，every,reduce等<br> 使用forEach不能使用break和return跳出循环</p>
<p>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</span><br><span class="line">myArray.name = <span class="string">"数组"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>,len = myArray.length; j &lt; len; j++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a>for...in</h5><p>使用for in 遍历数组的毛病</p>
<p>1.index是字符串<br>2.遍历顺序可能不是数组的内部顺序<br>3.会遍历数组的可枚举对象包括原型，例如上面的method和name<br>所以for in 不适合遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index,myArray[index])</span><br><span class="line"><span class="comment">//   0 a</span></span><br><span class="line"><span class="comment">//   1 b</span></span><br><span class="line"><span class="comment">//   2 c</span></span><br><span class="line"><span class="comment">//   3 d</span></span><br><span class="line"><span class="comment">//   name 数组</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.length)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="for-of"><a href="#for-of" class="headerlink" title="for...of"></a>for...of</h5><p>使用for of 遍历的是数组的值而 for in 遍历的是数组的键名<br>for of遍历只会遍历数组自身的值，而不会去遍历原型和其他属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><h5 id="1-使用for-in遍历对象"><a href="#1-使用for-in遍历对象" class="headerlink" title="1.使用for in遍历对象"></a>1.使用for in遍历对象</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  a: <span class="string">"apple"</span>,</span><br><span class="line">  b: <span class="string">"banane"</span>,</span><br><span class="line">  c: <span class="string">"cherry"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i,myObj[i])</span><br><span class="line"><span class="comment">// 会遍历到原型上的方法和属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line"><span class="comment">//   method function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想遍历原型上的方法和属性可以使用hasOwnPropery<br>hasOwnPropery可以判断某属性是否是对象的实例属性，从而过滤掉原型上的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">  <span class="keyword">if</span>(myObj.hasOwnProperty(i)) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i, myObj[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只获取自身属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="for-of-1"><a href="#for-of-1" class="headerlink" title="for...of"></a>for...of</h5><p>也可以使用for of 搭配Object.keys 来遍历对象 返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).<br>相关的Object属性还有<br>Object.getOwnPropertyNames(obj) 返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).<br>使用Reflect.ownKeys(obj)遍历 返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(myObj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, myObj[key])</span><br><span class="line">  <span class="comment">// 不包含原型属性</span></span><br><span class="line"><span class="comment">//   a apple</span></span><br><span class="line"><span class="comment">//   b banane</span></span><br><span class="line"><span class="comment">//   c cherry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果实在想用 for of遍历对象，可以给该对象添加Symbol.iterator迭代器接口<br>接口自己实现<br>for of循环会先调用集合的Symbol.iterator方法，然后返回一个新的迭代器对象，<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法<br>每循环一次调用一次<br>迭代器对象可以是任意具有next方法的对象，迭代器对象会重复调用这个方法var<br>使用Genertaor 自带next()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.a;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.b;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实现一个简单的迭代器</span></span><br><span class="line">myObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(self);</span><br><span class="line">  <span class="keyword">const</span> len = keys.length;</span><br><span class="line">  <span class="keyword">let</span> pointer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"> next() &#123;</span><br><span class="line">   <span class="keyword">const</span> done = pointer &gt;= len;</span><br><span class="line">   <span class="keyword">const</span> value = !done ? self[keys[pointer++]]: <span class="literal">undefined</span>;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     done,</span><br><span class="line">     value</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用for of 遍历Map对象 顺便回顾一下Map对象的基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">"a"</span>, <span class="string">"apple"</span>],</span><br><span class="line">  [<span class="string">"b"</span>, <span class="string">"banane"</span>],</span><br><span class="line">  [<span class="string">"c"</span>, <span class="string">"cherry"</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 给Map对象添加属性</span></span><br><span class="line"><span class="built_in">console</span>.log(myMap.set(<span class="string">'d'</span>, <span class="string">'durian'</span>)) <span class="comment">// 返回是添加之后的Map</span></span><br><span class="line"><span class="comment">// 判断key是否存在 返回值 是否存在</span></span><br><span class="line">myMap.has(<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.has(\'a\'): '</span>, myMap.has(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.delete('a') // 删除属性 返回值 是否删除成功</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.delete(\'a\'): '</span>, myMap.delete(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">// myMap.get('d') // 获取属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myMap.get(\'d\') : '</span>, myMap.get(<span class="string">'d'</span>) );</span><br><span class="line">使用数组结构 <span class="built_in">Map</span>的item</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, val] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>for of 使用于遍历数组/数组对象[{},{}]/字符串/map/set等有迭代器对象的集合<br>但不能遍历对象，应为对象没有迭代器对象,它可以正确的相应break、continue、return语句<br>es5的forEach方法其实性能比for循环还要弱，使用for循环可以将长度用遍历存起来，可以优化性能</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/zjx304/p/10687017.html" target="_blank" rel="noopener">for in 和for of的区别</a><br><a href="https://blog.csdn.net/kuangshp128/article/details/85342343" target="_blank" rel="noopener">ES6可迭代对象与迭代器的理解</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年末</title>
    <url>/posts/2df0633e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>浅拷贝与深拷贝</title>
    <url>/posts/2ba55f9f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="1-使用Object-assign将原对象的值分配给一个新对象"><a href="#1-使用Object-assign将原对象的值分配给一个新对象" class="headerlink" title="1.使用Object.assign将原对象的值分配给一个新对象"></a>1.使用Object.assign将原对象的值分配给一个新对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'zzj'</span></span><br><span class="line">	age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要在Object.assign 重新定义一个&#123;&#125; 然后将obj复制到&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">// 修改objCp 的属性 不会影响原来的对象</span></span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// &#123; name: 'zzj', age: '23' &#125; &#123; name: 'zzj', age: '22' &#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2-使用ES6的扩展运算符"><a href="#2-使用ES6的扩展运算符" class="headerlink" title="2.使用ES6的扩展运算符"></a>2.使用ES6的扩展运算符</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = &#123;...obj&#125;</span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// 效果同上</span></span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法"><a href="#1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法" class="headerlink" title="1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法"></a>1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能拷贝方法 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-编写一个深拷贝函数"><a href="#2-编写一个深拷贝函数" class="headerlink" title="2.编写一个深拷贝函数"></a>2.编写一个深拷贝函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写一个函数</span></span><br><span class="line"><span class="comment">// 1. 判断传入的值是否是 对象 如果是进行拷贝，否则直接返回</span></span><br><span class="line"><span class="comment">// 2. 判断传入的值 是对象还是数组 给该值初始化&#123;&#125;或者[]</span></span><br><span class="line"><span class="comment">// 3.进行递归</span></span><br><span class="line"><span class="comment">// 深拷贝函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCp</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"> 	<span class="comment">// 判断是不是&#123;&#125;或者Array</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data === <span class="string">'object'</span> &amp;&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 判断该值是对象还是数组</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">typeof</span> data.length === <span class="string">'number'</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="comment">// 进行递归，对子项进行判断</span></span><br><span class="line">      val[item] = deepCp(data[item])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = deepCp(obj)</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>2019回顾</title>
    <url>/posts/2df0633e/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0fd2be6f7b52698b89cadade57eec1e1d42a2b436c0ebed2ba8080ed27be0862">cf4fb014cf36a6c299418abf18364b46f85e42dcc416fd9d51cb6461c3a95ae028f01439b820667412c9a0b4b25d2e157fab2bd1636ab4a99acceb5ee12e3dd6ad04b6466c215d078675c0f9a83736eae561c487dee891333de3dc559fd3aec7ed175500ec96fd10be05ad229df0a32b5c4daee755711cf063331f8d8d604cef09c2f74347973ccbf7e3f32eeef165c797c5b87797822d534fa51ff8633040e4b74d17a17c3a44cde8d9eaa646b804c6ed43f6f6ed4f50775d6afea400a870283c60ce9954de47cd6379614bdfe113b6366739ff58b9584e0989533f3fd7c0d864316e8205b9a6ba2af1a952e3cc0151872a0de32022fe6dda6b29398bab1b5bb1745dee30345b92f3ea8751c899f4f09c70f8880ecec1bee285334c668878788e2f424b6f3e9684895ef2bd87730635d1817e2bdbf2f17c7cb949bf43ef976fb84ccfadee488e24a947d60c15c1cc8be9c0e6e3f0389652ba27dd119a0483b945d10dcbfc152eeb7e7d4cd179819d74cc01748a2de4808d667580cfb9ff911ce7576e2e44650cadcc6576a5bd1f20adac03f1e9d78302777a12fd8056d19f14fca9c44a329d4e7f9a3e6a2633dd6cdb9c6f0e9b6a17c00d0d9451adea062c9592167880d12d17b77a9bc840478f48890d280af30649e66ed4493f17b7c6e08c59c44c77157bf331bb0fef98ee8e74d606b39d6b07832c3e0bb01fb67484e2371693c5781affb34ba2f46c9e94d58969b513b40a026d5d4a564980fe58df73ddbcb77a362b61a014acd10f986f7ea7532c60004380df36c17e99e3e3836f3b1a54d09bf11d616f54ae610dc68cb6aa37617455211ef8bcf3c52ed636df3663eaf46839d23bcd749c9ea0fc4f4ffa345f72f77efb07ae810486637fe19e5c83e09d5fffc99bbd08d2b147885ff71b5ff3e8593e13031e7ebc46bd546f69995873ebc808c6226e70c780199fcf7da06b37db3170cfbb854fdb5b9722c935a2219c78f8ee61038b074f2dfb14b8253b25e8a5b178e401ab9b4483d9bba81f6ddec0d0bd22d880f0e965bba427be5de3e5f4dd243d9dc35ce26892a9d3f9e8a51ced71cf4b8c15e6db5f34ad7346754b8e6ba314d510760f95bb1ebd25fb9ec866c074fe8f678ecd42b5df11c58be64323fe11c2a93a7340dde823693589e5bf88b64ae909e1fc69f02e42b3d87df020e6dcb1a5dc0facf5db7b94481d68ac98225257e914d3622c4369b5168fb87b4e638533840643d0cc93769197e84b47e3e8c1c223dad637ccc7e0c242d9c16b80cbd0d5adc1fcc3bf7966202d72124cabe687c39c28821fbc4881473c71bcbca52db3b7d35992efbc3b0066726fa5055fff021aa74c98a67e64947b46331d8e1ce2e95f23ace3ab144b650fb98f9541f7c216d780e1e92e4962e986f11c7ea8eb547fed334e84a7d6215f373fc491c73c22dfdc8fb960966e29b997023ae6813fa9d5d10721ca523cf77171561420d5a8b4d68b2ea0f3c16247eabcd87c19fd8fd326f33e2a605257a32645f29758a881a77bc16fe8658de97a8ace0b4766fa77f11c6224679e9179533010bb1b94bae67a39d1d8855f4221e67d1d6bfcc71530c360764dc1e7f968faa3fdb39d0931bb8245efdbed759dd0a8a3b51fba09c924ca5528e29dfe428c54a9c465153beed7e7fe9f3bf8525f6bb1920e3860592d9c38a991f96c66f8b7373a4718b33c19a28cfd81a3a34147775b8af3b051e255f0c9cefcfe558bdb8bb550ee1554955200de0c10404da322f27fb43647c6677a48fa8605f342d9b60ee7f32a203fb8c9b36b0810155df39412dcad655d5a70c807a3afe9562da89fade538b5648c4f64a51cc34d98f02feae6347e39d30efef48c10d85781a3686fed1c81cbf22a7b1975577913799a0b1746f6d7db152bc1b5038c459387f1864e58a0b8ef31ddbb6e1bdcc298164d3eb126da53599cc1c7608d1fda32964368f5a868b48f3b2c14b8df0c0da70bd4c6257b55dffe4b2e43af85a6b77add59d999748ff85efdb15c18236f906e671614c37c68f26245a33e89dead33f5085a2e51f5d9bea7a4a2ebfe5567a4e5fa903f804dc4f973cc815e0e1f8708880c00558d3a2eeb697a61e28086b172dea728a5b4e28b4133fd76287d4380cb64ae10eb993123571d1372dabd57813bd137d8574a56b433cd8f36d4753639e7976446aff0da709302dc9b2733ba8b6d1333c001df7e2e764ea17acfa79b5f14ec637ea290d162dcae58b8fd3e8fc68b7aaf004d3d6bbda1ff54c77e1f57ccf471616b2a6b1bce67878ab26fe10921f13a4c83c6abd6de0f484c50de7f0c63032a43f3aad1d79fa25e23019873abfbc6a2a3def851476cc39adcb74e63a557b9edd5fa59ee2bf2fdc30acb8dee6188f490f095109fcb1f1dca7745654cdef9cdfdb2d93676a7aedd8dbd9057297305ad6013cae30a6992b8740e595e51f4751e42762a233f7e6c8dd4232651134c533623f85ce26f36f872924e6a3d7f79770a5d47763c935c830507be5eb784af63ced811bf571580a30fc7ebcd75b901f9972c81ff81a0eab04370fcfbc03d71d877200aeb64f8de99430edb1947612a86d89b096be50a5893f43f107ba5669b4638cb7e9eb1b4ca2539bc42e8561ff520fbd58cf8995892f2b82f6e418cdd28be96c2cf7925b8abd1e53830fc3ff1fee9b565ffa8e49f4ad2ab9d7b6d529517fc72c051823854ba94ea2ef0251d8dcbab62cc458bbba08ee0429a2ca4af7c61fa9fd5a86321edea47f92e0816eb7b595dcf1df29c63ef0363720ec1450541a57b03aaacf82e8c8859aa661b7d6c411e2eff2ed4a9525c54daaffcd2194b2250cb5f105048579bbffcf07c705bc0caa72daeb323aec5132f54bd0cb21ee7d4b65f8cbc13650608288b5b71fb498a0bfdbade7fb9c7c58fcaec831429416b5b31f16a30baf20a7d9f90bd4ac15c8b649d8b5b83e1ee306bece7f5eb39d41b8d63a764e4a76b64a6adec4424183eef24f140716c37506de62af7b1e63436f6307f17e530d78fa192865e53697785b0d9ed0c71460fc6cee865953beff9a9a35c8a60299536b3743769e707ac2d906cbae5f62622a022d8c38403673591e10f4bff9683ecc2e435333d64db33008be0cc6d65346cb86fb0ed53bd278999952e2613818019f7dd8707d44f12012251a516990f835edd270cbcbb1703c05c78f41cd11489450b51a8ecdecec2500e6955d6d32dc0591560074efa2e3e00dad38ed186e937f1b65d3fb4ec22bba055b42ed9823978dd8538230f0a6f54c5ad091e08c0ab9d70db159e58bf7b537bda98b679909a50578d88183c2e24ee15cb8633f1ae4042cf55c43005f51a45679def982205610b706f63f830c55bdf70459de98f34874ed19dbb195cfd0de8eab1b27aff6783847a2191f2c75acae66797a966a7909e1669afa09f96005e26f083810495973079dd8c8adc7c16bef1d5d50ee4248e65a5bd128af7c47b6db5dc5890ae842f20750d356d4003238b2fe304fdb1a625b61b583786545c40e6df01505f736f568b294332d50d4e2473aec0f8b1f6557246c969b622b31ccae6d538d8c828e9e3287649960f22c82ab7fc8aab5672139a0306ea92e7467a684ecd84d3eede146ceea1c37b29e1ba33be9444d86ccc803cb427d8a06f7716c4d13b08d957d7b4aebee76ac86ba2840faa6a3ab8dee317647653a4e1698a3098b68ec36c44e23920ece57f9f3aa10b948252527181acf9eb5bc005c7048b2353c8eb21e9bd2439417c9df5028e90824a47c24067528aa811908443fb73898dd3f9cd39f096c6836c8b88219473b1b8ba4bc8aaaf1dce13397d7471c915b57322720001e6ff640b9f0cc2a597206eece893a33c5ded451f585ad6a6cfdae3859f32b137cfdfad418bfdb3baff96ea1deb5f499befcf134eeb88bf2f82e7df5ce0841cc4101706ebc5c657f0a2d532a77bec97bd6ec38cc6689c886b41fc3ecec0ccde2c4ba6f0e51e956a81e73ec05a799b0be148822329f6fa2d11c78d1559fb47a61fe237ab321b6768313f3ca653592f9f2cedcd4f76024d2960e251bf1b3063ba895086f22c2792c999c7a58a60537662def4905c00c4a1f75d5f4347a2de9c860a8be3e793b5a69a583af0cf5a494f9cbda8f6736b49d82bd23d82b4981889e1961c83161a3e3a9be597b31282c146d5a8cebae8d624f5773c800d55cf7562a8c5740e47f4dda3b72ba46ad8ff0e5fad5c277586713d42bf5d48805d07cdc79642c7f9ad65d94b0efba017a0c6b0ea518ca12f2d6f1b1c2013045d44f9f2fdc8aa8a554213256ff53d05a45ae6af7161d7fd5f72e21bc2d7218aec63b3dabb15b7ae472847c6b654b492526dcfc1d2df89dc07fcecffef436549675e83671e93a26362c42cf2079107a0f5a2165dbdbc9c50532ed7766647d59428648ec7bfcba0a1765130d10c2ff2363da9d5e5578f79935be92c53f8efee01ed85205102cbbf6956d66cefc012963faa70b93ddd4ebaf9aeb6507aaa45718f84695bb5504ff361cb4c188c7393690c79f4cebe6dc7de8ae717f2f95cac63db16f1e34041b92db3a94ec3adb071866a3b2f7da2ae6160813eaf69a08cc5ed4298707468768fc3ac3f5ab095ef8e6884c8162062f7dfb751ef4ce1409ab12ca2e4c0482f10b13aa92a4d5c5dbbd36bed5d02a830cddf89b77608e7ad5c6d538f8b6eef0a468763a93c22803e5ad90953017bee7e51886d3154079abb8704ea7da0511b0361851ba7107e01444bff6faead6b2d29449bac11caa1dc70abe1e7db03255591a072d86a5297396e4000041fe9e911012277f42703c53f6c7eba60674b277aa1dbb70a9d86b057565c6b790aa438299bf38210697c7ec400effb6733eb2f3688c6b5b9f536516a1461dabd832f06e76d7c8cb80abd0bb063827bbc8b4115b035cf8f9df41b1176c36e9071a4d48777b0a48a1d6c92858b1b6f08042e695b27ecdd2a71fb79165560311a14cbb9cc3019a0bb968bc3b6bbabebed48a28e766f7fec2df130c5ed72a0c2485a4e1fc11173977621b3b2c576cefa26135febfc5ff377372f9be8aa41040272c0bc3ec0b73dd3912618aa2ffe01e64228b9f71f095268cd80b4521a3a5460bd7a78bb8e46da0886f033f2e7b1d048b703bca57bc7b9966d0756d3389bb98b07afafefc00fc8dfc459a3babfc5aba685d9dff8e1b2ea9d771b6c8bd3e35b37423e3aceb7a6248396e0039a574a85a4d9c25298af685becde2ed887fd8684b8e671cd598393893d395d1fd4bdfe6fe6525d2583e054a04e58eb96fd6c9616d8c417babe754925e1fe8e386d1f4492df52d2aa3c7c63a111d3d153c677527fb01014bcc9a51cb41558ff92f0612c09ea60ba3d426b24675acedc003f51d0d3d274b13486d867e10bb305b544ac801b5b27</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>daily</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>辞职感悟</title>
    <url>/posts/7997947e/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ad55dfc6c325b87aef597b36aca386b3c04edb95c79496fa3055a4a463b20b7d">cf4fb014cf36a6c299418abf18364b46f85e42dcc416fd9d51cb6461c3a95ae028f01439b820667412c9a0b4b25d2e157fab2bd1636ab4a99acceb5ee12e3dd6ad04b6466c215d078675c0f9a83736eae561c487dee891333de3dc559fd3aec7ed175500ec96fd10be05ad229df0a32b5c4daee755711cf063331f8d8d604cef09c2f74347973ccbf7e3f32eeef165c797c5b87797822d534fa51ff8633040e4b74d17a17c3a44cde8d9eaa646b804c685f009c97d630637cd87fb88039eae0c682b0481e56f950480eef6eba83be0288ff11409a8a17e26e2f9113c65ed33453e55f7966906f060887c3766f1c6b101fb4527b8f64c5caf6b269df463d6dc2edf697507fb84493aac85b8cb2add9a9daa79227958b840f08244a766c4a6dd90a4cf555d7dd164e1500c14fc385f7bbf5fa90a43466bf8d53e520ba02d28a01e30d81c9c72515c3d0ebc25fd883354d649883cfefb58a1f4a2560788c8934172c38e4e9c050fc965d95cbc165c107b3dcdffb4fe02b2fb2bfd4096ba112f51a04c04ec6733125a24f3153f0f66879e1cb4c84f9f14b09415e63ca0a3071486ec5d67969a59d4231d5d512e6a59cc5ec8dc4f83481aadb00aa7cf97b0dbda4b8a3919313d06efed619a43a8181c149b20affe7668aed90ad796f93e332309f236c87f34865696f7d03b6b5ae60662f0c66286a69cd510f219e729722aa7fe0214b50c480817daccc5fc85696163a5a8622d42bdeadb967134899577aadaf95065cc256b76a1018f4896157c7d44d9dc1aac0429a38b16ffeee7039ce982bbb1104f8bfa9382c6be7fb01a65c2f5b669492103ab9567fda700b228c551f0bf91d939ec7b0171a2c8a22d7c8f3a67fc7d60fa78feb9f8627af0d0453ddb6e3ec63a640ca453a1a57047a85a98d37a95cc0391d3b407546561e8e47795b849411f813f038d1e430049c414110ab2482501e6914f379423dd9d4e41dd8853d0baa397411f3ffc9e2236ad53f00bf2101f16f37d7cbf15d52a7df946d10bc9a0121a907861a7c1c8b3ad1f720a940322f79f9d5ad0eec06ba3398a7fcb2c93eb47cdeeba7b77f94e500634abf9ce1a169a6fc135ccc66782173b1eaf74342ad2970c70ac5866db64df56cb412efcd491d904b142482448e331a9ade6e51d6932c85ae69a89c2b395a6708a8421f941bf9aaa7f0e989ed6629d2d877dc5869752294339adf1391129ac707572c832e010645f18715359b291ebdb28c839befd4fd0309fed0f97bdb62c5f1a1d6f0e04cf124b9aea8f96a94f855eb14aa12b4c4053d8103d24c94f3207d5128a08d48dadd92be5325494590a311fb684862ba43050ad92a609362445019a5d827f0d105267298ca5e3cd801c0d07947fb6363abdfcaf5fdd8ff88a969dfc10100be70581ff8057322d05ebec075d57106906446c65e2bf0390f2335a71f4a051a5090d766e605dbbe66a945e7a733df3ce11cb54d2f89b0df5c1c2385633072341c5bc12c957bce6fb9d334ab18d75bd67dfd85d2dc36e3968931ddbb8b80a899343fc9f08711db74e1a5df781a96f594a9d048f1bb6c1120144821ae9ea433d49ae479a4e671513bb649be826e0f5565bbe96912d616396f67ff56b669228cc59ef62d2a2374fc400764ca28adc36f0b72e1f408381cb2ddf4bc14d05c905274c5ecc6cb2e92228416b1049e5011b51284ba89dc7fc4679ec487e8ea1282fc865f883c63ce948524a513b9820e1080d003053be4681b7b8448c21f21e9e9502cfe48e838622a2db6144af7759de0ad9a2cfda18cf4baadfd3bd65533e3ecf8f85b077e9bd4401a2c2638c4940697ceb4a6fcd398e24fe6d46ab2999188930a3c6f63d6637c412ca92098953b523cf454c0e711fbab8ca661f7087e7d40f50df74e610877708ee3272824982e2cbaaa5f0799590fdb666aafa463ff7195390a0e548dd190a15321dbadc63acb13bda4febec684868ae74cf3361e1a3508f0c3390ab7133e58cfbd9871464f4827a30bc78aeca59dd0017d3bb663a9e375b30940489f19b1e26c4f7c9d2f6792c2660b88d8340d52b3d60cb474101f1d611577cb8b4f7801f5ccace853b22a4d4dd60417670612036ff83b63b72d0ccbc22dc13ce6f64e010c1759a2fac745914e59b4cb14abccb98ef24dee6222534aac292bcc05962f4ee7782568d9b85c160efc2da535157301811e9e03a203675347fb1e6e2b8961494d23556c55698da1a6072093a35abcca8f89b06ed4f62222221baf7be2fa7bc78873bcedd849c60ca4c56de8a8b8f9d3f34377bcc9e97cf20972489638bd5a9ce2d9f9af1b8f0cbbc7d0c0f84baccf599b553d70ba0f9c59d58d5baf92cb6f398e36789f0e4ea65d0cf1d98baad06c1aa003380fd5bdb50c1febd3bf0d8fadd5721f1b7b46f25d89803890f4efdddf031b4e6e060be78e9d611497d587f0e21e361a0227d6de3a2d432857f7324c38c4456168bac1239827892ae5f29dc60e4049bd2516ae0c25e226097da5d5160ee01bd7a6d188aecd09f130d06be48d49dfa33296bfac7b4f7d4c40ba302075059c23f125670358b839d517950b14eea37c8e3774e6e5dd2eb4bb28c5d09c87e5a2a5a784590688188481f199dd76e658903cf4d5b219b86fd5fcae6b9cbea99943a525a8fade845354c004a4a6f440b3e65c863f483ff6e292fa8170a9add9da67593d1b0413358c0049ed69451b2bd2fc7fc774339e5a40d9b14d52e66e6eef447f07c0a19a3d58744dd11f979f30f766bb9029b8515c06d99ea3da0744726aeafcb54bdf047d60f7d0f63500dc0dd6e7972c531ba1d15b28316a700151674842bd87de8514b74f79432f92131f5250da14f818f13692351d720fc68f2c1aa9624e6ef7360c80c07cbf33ec60b0ddcce78ead31b12d73cd82e4ac5dd9b0201ce222f3499a7a3f368a406a25b075819261ee1ca14b2c3554ce720f6e3b66f5fcdd3e05686f1d8e4eb38f334a9f02371ac8b364c163736a665950d7c37bda333e057c5c302513380b9d4939b81dda3f92dd72fc8c57122259e8460494dedff3dc444628ee1b413331c62ba9455add6a3d17d7d202e6063388d415023f9f099c9eeacac33b9b65f19b761b714aac948bf3a12034f79be090e9c251d65d31f3f0aaf34c791c4acbd1f20c625d73269407716194ad76c43a76cd9f99d550c3a45d81c609de86623dd80e187564a649fd50f825efba172caee0abc4fa88a4687113b676187d1b1c596a1ecc8bdbbe1f836d933066e0a3766dffe16fe18ae0231fa6ab4a088a010d3631d78e6ead52301a61e0502cc97f173e4bfacf0c0c676c623ff168e81ec130c0491742df06c9d9b93aab13233899388835e3438ba09a30ac58f117650cb12944ba384690e6104a374cb416d6c3ae7469d9b5f35cecbd6289740fdb63952b57643e58fab85075084f7e883fe6da4a4b0d9dc091cc0f13ba08cfbd2f395d6c4bf2eca42ae5f4db9f87fba92eb2f1390b69769aca2b567668f1d1a9faaa7ca586ddee670a7480eb6fad7569fc354eeaf171b0786eee96037d4f3ad7c289e221293ab750781a608cf306a90a4ed9c15d096de9fece490c49751a4e3b5806b2ddef8a2f7a150f7d583d13aabbe151662501ce6889f6e5020799a6f56bbed912240bf989e7b906827415bd1318962dcc24183cfe066a40df4172205b51a5bc501eb9f2d25d0f19151b83f24a6eeec19551efd56739bd497d36506fce47b78c9e397082a1121ac9eb0a1b2d50d08b1dc2e91ce5c79dc31be464678a2a2a73b84aca11f25350143e07ab096ce33c751fc8c3400a293879feeb021bb4f1047435e88a2174977d3fe49a6c51a8cf6b208899fde3f449864b7f86052a04dbabd08548a86ca30fa40ea0c5ebbe17f891cceb283aa766c83199a89bf184a7b19c7248791c9f3cba487e8759fc5b45c6b46f4e2b56c82d44eeaf1133cc5c367a5373e2f35bc5935a8bea00729e8b30f371c1b6b2e12a5a44c36ccfefa27c12c545f92ff8de75a415c700bb238a25b6931a7f8238cfd45fd85449bed10322768d79f223e1da8e488536a3ab2f5a23e2d984ee8dab0f627a2109e1b29a0de137e4de579e72b771d64d1e3debcb050ccca99e7d31e7b10e12363d8321bb6cba7fad226bdd9d8935ef4e7eefe1f77c20d27aa8797848dc69739abef8f2ef432100f2b8c874f8f05ba219900246b6671ffaf83338323c5347764da3d0dd6fb3fff86d207940a34e0b157fe27b0bfbf48bcd6d58228144712262a0ddb853db7332f93145fb6039ed5925f39b2e0cc808b0b65bf939290a7f2aaa72d4565153693fae032c31214697bb3e6e7cb1b2d085234f31b182d1bf3f120e5c8174d5fd827b9afccdf19cd79bd8ce2b9fa7c0e55d984bd1200c2384ae882a20e53101536c7e9d6c9abc7c2441db586d3a3bc77a5e2eba673780488ce0df0cf5060bd7e1c46e84e64a64919ea79b7e4a82b457c03aba517f496def7a36ade0d25c8774f06e265475f31d034b4e002e9e38314baf355d762afead4eff6e2736c0b9ec35732ea821f2532ef567d44fa98e8283d57225bff12c66d9345960c784901db745026eaee668844206b398b5315eed9c07ee990f69665ac39df7b5f6637d211bc5f9b0f102ce5721a0524c5c58396c5fbd034192aa027d5ec984215b6b5706b82168dbae4a975e649a5e246d2c77bfe41b0de011c8ab25c6b404252bfe3202c217ff9b5c94e07499f32dea689a9bca4beb6a4600d5148f38b238928e418f697cff1a3c70dd9af33da7f10eca037535df462f2581d959a0e771fe19583766f857fb1207dec19bd69fb74d97025228768ebceb8d55decb6e0a3bbd4e0a75a59efdbcd04586966a2da208eb0f48a38d2d7c5475d3edb33063b15e6f6c4b7a5ad09182ee146ba20368413366da1bb06fdb448d3719813f2043c4cdff299e733c8e090e94c3f6c21e944a97356160f42b408045d63d108cf4de24d559c351a2c134fa0dbe7d602d70f21d89123c1b2952dbe351b50d243f789283552ec3b9526ac477521a7f40e2c5203e977cbd4a261b9bd6bb6e2d480cceb04d102c376864b5d891debca33af04841b612e0c1883858d2a435a3be6255f7a1f506c74ac5b6ad50bfac77f3886a4c87eb3476b12e92a3d173e6cd29edd3ba78a66f62fb22555bee02af86afad4a25d6e92c46b247921b4c29ded80e450644621ab10ddfd68ef297a157a355b9454ac80170df01e712ea741d65d1968c679babd64c7ad38115f11c9efc3d46c98dd80ff6fc9c0d8a53e0bda28a84374db0ab74c120f033a86635358f0919f7d4ba8ae89b5727c1dad6c55f743368465ef29a0f437fa311cfd01adacacc6dcc4b67bbe5b3888006ebe4dad9d14724eeb647402282f837a6e3610cd3a69c4b2c1440071503de9245cf0ac18cf0290faccc23defe90fcfb9637d5e52fb89d4e473936c5e313d876aa1000c27bb697844ec52ed660aeba2a24f8aec1c74e6121c54fc6283111839dbfba9681429b2440d85d438aff975199e7c828a055812633c55789519b2d5ac7448c5a8b8d783483729a72c0c0a6d5357e8db707a5414538f981d2be1e7e23849ac58b7b5f71c52a230bbc541a91e779f8bc48d5d1c0c952b88a961e1d511d5da3ef96e725c984b52e12cabe4cae405782915d121dde5fa1e385aeb408632477921921c55efaa7e8cc049f5342197db9428feb3ba7ab47d8747f217b2524af57ab3e58a9fb2f8a7942c9dbafe2e4ae11dab009c0baa86c9f63ccb75e1f5fb4dc7fdcfc4fb28075c4c60c7e8414bfbdae5c098679b1128cceb61f97fe487f203884f387fb2752ce91b5dd4ee80c1c823325aa601f05cd75bdb6a9bd84a9c2e9c6fedf7a0485ebd0b068074e0cbee4715632dcec72e533437451f043214b5aab06a8beb7817f36888855c6e17c4e98d98dab4fd81fd240f463cdb57dc23b8435ccbd7cae744ec254fc626cdf246e7b00d748e4db3afa87d36da02fd80692ad48f78c0af3c117084d5816bfa816ef6131003dc91d1d39906e0e7a53a9e6cb44a704d1616cb965a55a27899b1bf1087d2143910764ac1fb0ce6ebd668077914e2b69bf936dbf994fed8f2d6b9ab325ac9c824f0ee4b89e3227f96799e656befe0917468bbb44bfb4de76fc8fb37ba76588c2dd8cde347d9c9d3531531971b4dc804214dda3f0641c68b6640ba59ab92ae9f80c2915197fa6c976b98ca33ad3c961c686ae32da9d11e1246ac94f42c8ecb122bee0e1197f7dcd05b428f23b4263d520296f14aaff5addffdd31016c7751cbd45e37adf3d03e0f2b3c7b3cc64a2eb0de0df10554101849397a767b8154d5de1af3b025c53996ac4e12fca2b62857246a87dace736c576d739e7fd2cf7f535c99a047dd3a418288d5e460fc5b498ff68d3573375c9c54f75db2dda49286a581282ee5616db0a446ed9e94fd49ec9f8ce06749c7382530c35c13c842388aeb33c529959a7b64a651b1a17f19be536fa4ea45585704962d75d25d4a439e9740ee97f2d18eda6d63759012f3dd3a7a75f50539cca865e53f9e81f1b490e5c44d7292083df69c12d83bb2168b6a5209d12ff8ea4f591e7986c06e5abbc70790aca6a1aee14335d35aee252477cb892a807f97e1ceb6cf41dc335a4bc055d628c1ed41aee90b8688154f54b5a05e36fb3d3b5048668f620fa51e2f4d276167c13e91b3c8d04094a88baa0c17be2958fef232f232e2e66296e1a95b83425f055e607c8825743a491495614533cf40e522d415403cbb8b4297d439e41209b3ea434e8db8400ffa802e6e19c8c5f67202112ae03eee98590b96f48bb107752228bcd3cda4000900b1559e5a154565be26aa97e79956024440abe774b4ddd270376d5e938078d2509675ddb3fe84490351292dd2717ac7629ddd722c6e4058c56cc3d7f482399da42481d435b95950116a64c3fdf52310dbe7dc66105f424bf6530cdddea6cb07fd00acfc3faa40e9e1da58e34b911e09bdfd42dfafdc5f6820758c7295e88b1863493ebf36d97906f8c49a9487bb5a29f5e4498f954c2db20ad4d925a46def7a2645b0dbe673bb995fec3bda3768d49c11b6f7d9d4e9f73d65fd1a6cdad96a86ce8a80028483d859616daed8e6439f1ab3bdb9528b7f3dc15e11deb4314ec929da7d8c87a2424fd039e11b7dd3e1a3a7f0efb78983390ef1302ed27a65ce5cee4ca6b416326632eec4cdc33b5d297e6d8079016f87985cea7def946a641800bd1989b2268f26fc1de1629d4484f93a94a648d0c4be427fc6416679800ccd8dcace35e9898641c277fb59e6269f6b661e27af9f3aa7e5e6b262f01961be646ca6dbc65e241f2d4ccfa61b21354cfd3e88fde17033daf3725e6a1775bbeb85a7fa3e502330db8cb6022529fd2b6fd403d3d578602ba0361044a27782e600fc465fbdc95fbb65fdce2ca56db980b670353ebeb9ab3a4c4f0aedb635575fd0c8180f37d65c13862fd83889bb9fa60e03ddeaf8fb541521860823d0cd6dc26af730a33f4c3270ee5c692eca726084ff00c4ec99cf119920e07ed6279a08b4828b77632f5d1e7cf4925513639d63944fff42fdb288b3a6b9e28669991b542d6f55a7e76af67e5484ff2783ebfa4298acbefee4dc4b0615b074953d8760fc75fb74cb8293f5787237da467fcc25ed1ebcb1f61c5db6b04d6c7e58fb51fbff1635f42633c377fcc83359696bc0b745550e26d1fcdfcafa37c0cc8d8ffa04e0e2fc9208a33e60289ad2033f08f16ed6c083bb49806eff3ee721d766cc55a530d4adb8f98e3f17c7b41b91b775f9d224d72d96e1f0c3050bc51c04630ab2dd34f1ea97baf521d49f462ba1a30437bab174c85cae08afe678ca8f97a5662aeb8060df7e3510b1e9c73a94f3a1270d4b7f8f0a04c956de006536ee51bf6eeddb7ccf82c93b54ec5e022798665db38202061f25ddc887c0c7b07a9f21023ce0014ce8ea5a0cf9234f2d50e81f1d44a0b79b22bfece0629645faf32322c6726c1ebbeff1d2c7eeea4829e0c4e012fb6e00b75e561c431422c8ca8e057085b7515be083b224db5bfb868a59cb297fe5b1cb06e78dccf7ad298e642e58ad427eed524500a46b9d795489d33de13a04b9177b0c9777cacc82abde3d03854a300401202ec6349f81557930f6afa8089737ce3c7a70578d48a616d419fc9a9ea5d865d86b76edf860869d336e56b9df9e94122ca2a7e97a74dbbfd9040f546dfd0fe5e752b31f1ab976bbc8178b49f949ccc06e1119baa93fae83b1ac0b48fc750cfdc9ed17c8974ecad589012c91e85e0baf2840d895cd34eef599e3d95d18862f824f2645d7021736d6ec98e7c1b4dd9bb0ec87ff390f8d2d0c1778bd8de07c7beea2d3abdcc43ff69234e0efba1391233a43cdc7f66f151cfbd226434bfd933eeacb358a1be88aa9cec23647d6ae0e1f0373d23d0bd27d2158578b9fac4a5ecac201c6df281924c30c38c1a605665ff8579c6cacfb523f14f9fc48ae59045bf7a4fe920e3f75bea6321810831b5fb858bc527a681b978a609e598051f9a2c6e924648a549dae56623b6481da11531a9907913190669b93ac8a2b39cc7042dd468c1de5b43d1a960f2ba041190eddccfb9293b917702e39926e49e751fa18baa7723381689daa7d2d7e3d4a897fa50d5d386fb5705f15f33eb707f73c74c0ad4a4c0454856134e78395ca627a539678f2dcd9c2f1a977eb553a486a076c667be252246529306d1709949545d256625c418bcb17aa07f1dd2f7429152f4696dd1eae0a46c83238a02047f7900e6378b3cb4aaf47c0d4c3e6125e8be475a9ba86f9455390b230d8210d0a97388a69673b6ab444e1873d9347d3f7b3f6af6377e5ac4c11c57a3bcd092520299b82b49724ed62373613e5d8f3cf9375816edf63d9c54edac831b492f768830d752e77c3a69677288f68d8b0f</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>daily</category>
        <category>2019</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
</search>
