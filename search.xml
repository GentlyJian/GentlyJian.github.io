<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅拷贝与深拷贝</title>
    <url>/posts/2ba55f9f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="1-使用Object-assign将原对象的值分配给一个新对象"><a href="#1-使用Object-assign将原对象的值分配给一个新对象" class="headerlink" title="1.使用Object.assign将原对象的值分配给一个新对象"></a>1.使用Object.assign将原对象的值分配给一个新对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">	name: &#39;zzj&#39;</span><br><span class="line">	age: &#39;22&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 要在Object.assign 重新定义一个&#123;&#125; 然后将obj复制到&#123;&#125;</span><br><span class="line">let objCp &#x3D; Object.assign(&#123;&#125;,obj)</span><br><span class="line">&#x2F;&#x2F; 修改objCp 的属性 不会影响原来的对象</span><br><span class="line">objCp.age &#x3D; &#39;23&#39;</span><br><span class="line">console.log(objCp, obj) &#x2F;&#x2F; &#123; name: &#39;zzj&#39;, age: &#39;23&#39; &#125; &#123; name: &#39;zzj&#39;, age: &#39;22&#39; &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-使用ES6的扩展运算符"><a href="#2-使用ES6的扩展运算符" class="headerlink" title="2.使用ES6的扩展运算符"></a>2.使用ES6的扩展运算符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  name: &#39;zzj&#39;,</span><br><span class="line">  age: &#39;22&#39;</span><br><span class="line">&#125;</span><br><span class="line">let objCp &#x3D; &#123;...obj&#125;</span><br><span class="line">objCp.age &#x3D; &#39;23&#39;</span><br><span class="line">console.log(objCp, obj) &#x2F;&#x2F; 效果同上</span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法"><a href="#1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法" class="headerlink" title="1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法"></a>1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  name: &#39;zzj&#39;,</span><br><span class="line">  age: 22,</span><br><span class="line">  girlFriend: undefined,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 不能拷贝方法 和 undefined</span><br><span class="line">let objCp &#x3D; JSON.parse(JSON.stringify(obj))</span><br><span class="line">objCp.name &#x3D; &#39;sjj&#39;</span><br><span class="line">objCp.age &#x3D; 23</span><br><span class="line">console.log(objCp, obj)</span><br><span class="line">&#x2F;&#x2F; 结果</span><br><span class="line">&#123; name: &#39;sjj&#39;, age: 23 &#125; &#123; name: &#39;zzj&#39;,</span><br><span class="line">  age: 22,</span><br><span class="line">  girlFriend: undefined,</span><br><span class="line">  getName: [Function: getName] &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-编写一个深拷贝函数"><a href="#2-编写一个深拷贝函数" class="headerlink" title="2.编写一个深拷贝函数"></a>2.编写一个深拷贝函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 编写一个函数</span><br><span class="line">&#x2F;&#x2F; 1. 判断传入的值是否是 对象 如果是进行拷贝，否则直接返回</span><br><span class="line">&#x2F;&#x2F; 2. 判断传入的值 是对象还是数组 给该值初始化&#123;&#125;或者[]</span><br><span class="line">&#x2F;&#x2F; 3.进行递归</span><br><span class="line">&#x2F;&#x2F; 深拷贝函数</span><br><span class="line">function deepCp(data) &#123;</span><br><span class="line"> 	&#x2F;&#x2F; 判断是不是&#123;&#125;或者Array</span><br><span class="line">  if(typeof data &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 判断该值是对象还是数组</span><br><span class="line">    let val &#x3D; typeof data.length &#x3D;&#x3D;&#x3D; &#39;number&#39; ? [] : &#123;&#125;</span><br><span class="line">    for(let item in data) &#123;</span><br><span class="line">      &#x2F;&#x2F; 进行递归，对子项进行判断</span><br><span class="line">      val[item] &#x3D; deepCp(data[item])</span><br><span class="line">    &#125;</span><br><span class="line">    return val</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  name: &#39;zzj&#39;,</span><br><span class="line">  age: 22,</span><br><span class="line">  girlFriend: undefined,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let objCp &#x3D; deepCp(obj)</span><br><span class="line">objCp.name &#x3D; &#39;sjj&#39;</span><br><span class="line">objCp.age &#x3D; 23</span><br><span class="line">console.log(objCp, obj)</span><br><span class="line">&#x2F;&#x2F; 结果</span><br><span class="line">&#123; name: &#39;sjj&#39;, age: 23 &#125; &#123; name: &#39;zzj&#39;,</span><br><span class="line">  age: 22,</span><br><span class="line">  girlFriend: undefined,</span><br><span class="line">  getName: [Function: getName] &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
</search>
