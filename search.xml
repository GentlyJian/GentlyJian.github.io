<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅拷贝与深拷贝</title>
    <url>/posts/2ba55f9f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="1-使用Object-assign将原对象的值分配给一个新对象"><a href="#1-使用Object-assign将原对象的值分配给一个新对象" class="headerlink" title="1.使用Object.assign将原对象的值分配给一个新对象"></a>1.使用Object.assign将原对象的值分配给一个新对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'zzj'</span></span><br><span class="line">	age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要在Object.assign 重新定义一个&#123;&#125; 然后将obj复制到&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">// 修改objCp 的属性 不会影响原来的对象</span></span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// &#123; name: 'zzj', age: '23' &#125; &#123; name: 'zzj', age: '22' &#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2-使用ES6的扩展运算符"><a href="#2-使用ES6的扩展运算符" class="headerlink" title="2.使用ES6的扩展运算符"></a>2.使用ES6的扩展运算符</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = &#123;...obj&#125;</span><br><span class="line">objCp.age = <span class="string">'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj) <span class="comment">// 效果同上</span></span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法"><a href="#1-使用使用Json-parse-Json-stringfy-缺点：不能拷贝源对象中-undefined-值和-方法" class="headerlink" title="1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法"></a>1.使用使用Json.parse(Json.stringfy()) 缺点：不能拷贝源对象中 undefined 值和 方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能拷贝方法 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> objCp = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-编写一个深拷贝函数"><a href="#2-编写一个深拷贝函数" class="headerlink" title="2.编写一个深拷贝函数"></a>2.编写一个深拷贝函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写一个函数</span></span><br><span class="line"><span class="comment">// 1. 判断传入的值是否是 对象 如果是进行拷贝，否则直接返回</span></span><br><span class="line"><span class="comment">// 2. 判断传入的值 是对象还是数组 给该值初始化&#123;&#125;或者[]</span></span><br><span class="line"><span class="comment">// 3.进行递归</span></span><br><span class="line"><span class="comment">// 深拷贝函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCp</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"> 	<span class="comment">// 判断是不是&#123;&#125;或者Array</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data === <span class="string">'object'</span> &amp;&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 判断该值是对象还是数组</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">typeof</span> data.length === <span class="string">'number'</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="comment">// 进行递归，对子项进行判断</span></span><br><span class="line">      val[item] = deepCp(data[item])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objCp = deepCp(obj)</span><br><span class="line">objCp.name = <span class="string">'sjj'</span></span><br><span class="line">objCp.age = <span class="number">23</span></span><br><span class="line"><span class="built_in">console</span>.log(objCp, obj)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'sjj'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'zzj'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  girlFriend: <span class="literal">undefined</span>,</span><br><span class="line">  getName: [<span class="built_in">Function</span>: getName] &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
</search>
